@import '../../styles/constants';

.header .btn-primary .span {
  display: none;
}

.logo {
  display: flex;
  align-items: center;
  gap: 16px;
}

.logo p {
  font-size: 20px;
}

.logo .text {
  text-transform: uppercase;
  width: 120px;
  background: -webkit-linear-gradient($on-primary, $primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 20px;
}

.header .container,
.header-actions {
  display: flex;
  align-items: center;
}

.header .container {
  justify-content: space-between;
}

.header-actions {
  gap: 16px;
}

.header .btn-primary {
  padding-inline: 12px;
}

.search-view {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;

  height: 100svh; /* for mobile browser */
  background-color: $surface;
  color: $on-surface;
  clip-path: circle(4% at calc(100% - 102px) 5%);
  opacity: 0;
  visibility: hidden;
  z-index: 4;
  transition: clip-path 500ms ease;
}

.search-view.active {
  opacity: 1;
  visibility: visible;
  clip-path: circle(130% at 73% 5%);
}

.search-wrapper {
  position: relative;
  border-block-end: 1px solid $outline;
}

.search-wrapper::before {
  content: '';
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 16px;
  width: 24px;
  height: 24px;
  border: 3px solid $on-surface;
  border-block-start-color: transparent;
  border-radius: $radius-circle;
  animation: loading 500ms linear infinite;
  display: none;
}

.search-wrapper:has(.searching)::before {
  display: block;
}

.search-field {
  height: 80px;
  line-height: 80px;
  padding-inline: 56px 16px;
  outline: none;
}

.search-field::placeholder {
  color: $on-surface-variant-2;
}

.search-field::-webkit-search-cancel-button {
  display: none;
}

.search-wrapper .leading-icon {
  position: absolute;
  top: 50%;
  left: 28px;
  transform: translate(-50%, -50%);
}

.search-wrapper > .m-icon {
  display: none;
}

.search-wrapper .icon-btn {
  background-color: transparent;
  box-shadow: none;
}

.search-view .view-list {
  padding-block: 8px 16px;
}

.search-view .view-item {
  position: relative;
  height: 56px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  gap: 16px;
  padding-inline: 16px 24px;
}

.search-view .view-item :is(.m-icon, .item-subtitle) {
  color: $on-surface-variant;
}

.search-view .view-item .item-link {
  position: absolute;
  inset: 0;
  box-shadow: none;
}

@media (min-width: 768px) {
  .header-actions {
    gap: 24px;
  }

  .header .btn-primary {
    padding-inline: 16px 24px;
  }

  .header .btn-primary .span {
    display: block;
  }

  .search-view {
    clip-path: circle(3% at calc(100% - 273px) 6%);
  }
}

@media (min-width: 1200px) {
  .header .icon-btn {
    display: none;
  }

  .logo img {
    width: 200px;
  }

  .header {
    position: relative;
    height: 120px;
    z-index: 0;
  }

  .header .container {
    padding-block: 0;
    height: 100%;
  }

  .search-view,
  .search-view.active {
    all: unset;
    display: block;
    position: relative;
    width: 500px;
    animation: none;
  }

  .search-wrapper {
    border-block-end: none;
  }

  .search-wrapper > .m-icon {
    display: block;
  }

  .search-field,
  .search-view .view-list {
    background-color: $surface;
  }

  .search-field {
    height: 56px;
    border-radius: $radius-28;
  }

  .search-result,
  .search-view:not(:focus-within) .search-result {
    display: none;
  }

  .search-view:focus-within .search-result.active {
    display: block;
  }

  .search-view:has(.search-result.active):focus-within .search-field {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .search-view .view-list {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    max-height: 360px;
    border-radius: 0 0 $radius-28 0;
    border-block-start: 1px solid $outline;
    overflow-y: auto; //for firefox
    overflow-y: overlay;
  }

  .search-view .view-list:empty {
    min-height: 120px;
  }

  .search-view .view-list::-webkit-scrollbar-button {
    height: 20px;
  }

  .search-view:is(:hover, :has(.view-list):hover) {
    filter: drop-shadow($shadow-1);
  }

  .search-view:is(:focus-within, :has(.view-list):focus-within) {
    filter: drop-shadow($shadow-2);
  }
}
